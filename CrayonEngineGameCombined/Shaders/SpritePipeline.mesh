// STANDARD HEADER BEGINS
#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_nonuniform_qualifier : enable
// STANDARD HEADER ENDS

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 4, max_primitives = 2) out;

//DESCRIPTOR INFORMATION BEGINS
// Define our DescriptorSet inputs
layout( set = 0, binding = 0, std140 ) uniform UniformBufferObject
{
	mat4 model;
	mat4 view;
	mat4 proj;
} ubo;
layout( set = 1, binding = 0 ) uniform sampler2D texSampler[];
layout( set = 2, binding = 0, rgba8 ) readonly uniform image2D stagingImages[];
//DESCRIPTOR INFORMATION ENDS

// Define our push constant input
layout(push_constant) uniform Push
{
    vec2 offset;
    vec2 origin;//texture origin
    vec2 extent;//texture extent
    vec2 scale;
    uint textureID;
    float rotation;
} push;

// Define our outputs
layout(location = 0) out vec2 fragTexCoord[]; // Note: array syntax for per-vertex output

void main()
{
    vec2 halfExtent = 0.5 * push.extent * push.scale; // Incorporate scale like in vertex shader
    vec2 textureSize = vec2(textureSize(texSampler[push.textureID], 0));
    vec2 scaledExtent = push.extent * push.scale * textureSize;

    // Calculate vertex positions (model space, with offset and rotation if needed)
    mat4 rotationMatrix = mat4(
        cos(push.rotation), -sin(push.rotation), 0, 0,
        sin(push.rotation), cos(push.rotation), 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );

    vec4 vertices[4] = vec4[](
        vec4(-0.5 * scaledExtent.x, -0.5 * scaledExtent.y, 0.0, 1.0), // top-left
        vec4(0.5 * scaledExtent.x, -0.5 * scaledExtent.y, 0.0, 1.0),  // top-right
        vec4(0.5 * scaledExtent.x, 0.5 * scaledExtent.y, 0.0, 1.0),   // bottom-right
        vec4(-0.5 * scaledExtent.x, 0.5 * scaledExtent.y, 0.0, 1.0)   // bottom-left
    );

    // Apply rotation and offset
    for (int i = 0; i < 4; i++) {
        vertices[i] = rotationMatrix * vertices[i] + vec4(push.offset, 0.0, 0.0);
        gl_MeshVerticesEXT[i].gl_Position = ubo.proj * ubo.view * vertices[i];
    }

    // Define texture coordinates (matching vertex shader logic)
    vec2 uvCoordinates[4] = vec2[] (
        vec2(push.origin),                          // top-left
        vec2(push.origin.x + push.extent.x, push.origin.y), // top-right
        vec2(push.origin.x + push.extent.x, push.origin.y + push.extent.y), // bottom-right
        vec2(push.origin.x, push.origin.y + push.extent.y)  // bottom-left
    );

    // Assign texture coordinates to each vertex
    for (int i = 0; i < 4; i++) {
        fragTexCoord[i] = uvCoordinates[i];
    }

    // Set the number of vertices and primitives
    SetMeshOutputsEXT(4, 2);

    // Define the two triangles
    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 3); // First triangle: top-left, top-right, bottom-left
    gl_PrimitiveTriangleIndicesEXT[1] = uvec3(1, 2, 3); // Second triangle: top-right, bottom-right, bottom-left
}